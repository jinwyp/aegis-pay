<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <link href="/static/components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

<!--    <script src="/static/components/avalon/dist/avalon.js"></script>
    <script src="/static/components/jquery/dist/jquery.js"></script>-->

    <script type="text/javascript" src="<%= staticPath %>/components/requirejs/require.js"></script>
    <script type="text/javascript" src="<%= staticPath %>/scripts/common/config.js"></script>
    <script type="text/javascript" src="<%= staticPath %>/scripts/common.js"></script>
    <!--<script type="text/javascript" src="<%= staticPath %>/scripts/avalon_components/pagination.js"></script>-->

</head>
<body>
<div ms-controller="test">
    <xmp ms-widget="{is:'ms-select', items:@items, value:@value}"></xmp>
    <xmp ms-widget="{is:'ms-pagination', totalPages:@value}"></xmp>
</div>


<div id="select_tpl" style="display:none;" ms-skip>

</div>
<script>


    requirejs([ 'jquery', 'avalon'], function( $, avalon){

        var vm = avalon.define({
            $id: 'test',
            items: ['请选择', '选项一', '选项二'],
            value: 1,
            totalPages: 1,
            onChange:function(a, b){
                console.log(a,b)
            }
        });
        function heredoc(fn) {
            return fn.toString().replace(/^[^\/]+\/\*!?\s?/, '').
            replace(/\*\/[^\/]+$/, '').trim().replace(/>\s*</g, '><')
        }
        avalon.component("ms-select", {
            template: heredoc(function () {
                /*
                 <div ms-class="['btn-group', @_open && 'open']">
                 <a name="dropdown-toggle" class="btn dropdown-toggle"
                 data-toggle="dropdown" ms-click="@_openDropDown | prevent" href="#">
                 {{@value}}
                 <input ms-attr="{name:@name,value:@value}" type="hidden">
                 <span class="caret"></span>
                 </a>
                 <ul class="dropdown-menu" >
                 <li ms-for="(key, val) in @items" >
                 <a href="javascript:;" class="not-close"
                 ms-click="@_selectValue(key, $event)">{{val}}</a>
                 </li>
                 </ul>
                 </div>
                 */
            }),
            defaults: {
                items: [],
                value: '',
                _open: false,
                name: '',
                onInit: function (e) {
                    var vm = this;
                    avalon(document).bind('click', function (e) {
                        if (e.target.name !== 'dropdown-toggle') {
                            vm._open = false
                        }
                    })
                },
                _selectValue: function (key) {
                    var old = this.value
                    var neo = this.items[key]
                    if (old !== neo) {
                        this.value = neo
                        if (this.hasOwnProperty('onChange') && typeof this.onChange === 'function') {
                            var ret = this.onChange(neo, old)
                            if (ret !== false) {
                                this._open = false
                            }
                        }
                    }
                },
                _openDropDown: function () {
                    this._open = true
                }
            }
        });



        var paginationTemplate = heredoc(function() {

            /*

             <nav class="pagination-financial">{{@totalPages}}
             <ul class="pagination pageno">
             <li> <a aria-label="Previous" ms-click="@_changePage(@currentPages-1, $event, '')"> <span aria-hidden="true" > 上一页 </span> </a> </li>

             <li ms-for='(key, page) in @_pageArrayLeft'> <a ms-class="{active : page.value == @currentPages}" ms-click="@_changePage(page.value, $event)">{{page.value}}</a> </li>
             <li ms-visible='@_ellipsisLeft'> <a >...</a> </li>


             <li ms-for='(key, page) in @_pageArrayMiddle'> <a ms-class="{active : page.value == @currentPages}" ms-click="@_changePage(page.value, $event)">{{page.value}}</a> </li>


             <li ms-visible='@_ellipsisRight'> <a >...</a> </li>
             <li ms-for='(key, page) in @_pageArrayRight'> <a ms-class="{active : page.value == @currentPages}" ms-click="@_changePage(page.value, $event)">{{page.value}}</a> </li>


             <li> <a aria-label="Next" ms-click="@_changePage(@currentPages+1, $event, '')"> <span aria-hidden="true"> 下一页 </span> </a> </li>
             </ul>

             <div class="jump-to-page">
             <span>共 {{@totalPages}}页, 到第</span> <input type="text" placeholder="" ms-duplex="@inputCurrentPages"> <span>页</span>
             <button class="iBtn pagination-button" ms-click="@_changePage(@inputCurrentPages, $event)">确定</button>
             </div>
             </nav>


             */

        });


        avalon.component('ms-pagination', {
            template: paginationTemplate,
            defaults: {
                totalPages : 10,
                currentPages : 1,
                inputCurrentPages : 1,
                changePageNo : function(){},
                changeTotalPages : function(){},

                _pageArrayLeft : [],
                _pageArrayRight : [],
                _pageArrayMiddle : [],

                _ellipsisLeft : false,
                _ellipsisRight : false,

                onInit : function() {
                    console.log('init', this.totalPages);
                    var vm = this;
                    //this.changeTotalPages(vm._showPaginations)
//                    vm._showPaginations()

                },

                onReady : function(){
                    var vm = this;
                    console.log('ready', this.totalPages);
//                    this.$watch('totalPages', function(a){
//                        console.log('ready', this.totalPages);
////                        vm._showPaginations()
//                    })
                },

                onViewChange : function(){
                    console.log('views change', this.totalPages);
//                    this._showPaginations()
                },

                _changePage : function(pageNo, event){
                    event.preventDefault();
                    var vm = this;
                    var tempNo = Number(pageNo);

                    if (tempNo < 1){
                        tempNo = 1
                    }else if (tempNo > this.totalPages){
                        tempNo = this.totalPages
                    }

                    this.currentPages = tempNo;
                    //this.changePageNo(tempNo, vm._showPaginations );
                    vm._showPaginations()

                },

                _showPaginations : function (totalPages) {
                    var vm = this;
                    if (totalPages) {
                        vm.totalPages = totalPages;
                    }

                    vm._pageArrayLeft = [];
                    vm._pageArrayRight = [];
                    vm._pageArrayMiddle = [];

                    vm._ellipsisLeft = false;
                    vm._ellipsisRight = false;

                    var paginationShowNumberLimit = 8;
                    var paginationLeftShowNumber = 2;
                    var paginationRightShowNumber = 2;
                    var paginationMiddleShowNumber = 3;

                    var currentPageShowLeftNumber = paginationMiddleShowNumber + 1;
                    var currentPageShowMiddleNumber = Math.ceil(paginationMiddleShowNumber / 2) ;

                    for (var i=1; i<= vm.totalPages; i++){
                        console.log(vm.totalPages)
                        if (vm.totalPages <= paginationShowNumberLimit){
                            vm._pageArrayMiddle.push({value:i});
                        }else{

                            //创建左部分的分页 例如 1,2
                            if ( i <= paginationLeftShowNumber ){ vm._pageArrayLeft.push({value:i}); }

                            //创建右部分的分页 例如 99,100
                            if ( i >= vm.totalPages - (paginationRightShowNumber - 1) ){ vm._pageArrayRight.push({value:i}); }

                            //创建中间部分的分页 例如 49,50,51
                            if (i > paginationLeftShowNumber  && i < vm.totalPages - (paginationRightShowNumber - 1) ) {

                                if (vm.currentPages <= currentPageShowLeftNumber && i <= (currentPageShowLeftNumber + 1) ) {
                                    vm._ellipsisRight = true;
                                    vm._pageArrayMiddle.push({value:i});
                                }

                                if ( vm.currentPages > currentPageShowLeftNumber && vm.currentPages < vm.totalPages - paginationMiddleShowNumber) {
                                    vm._ellipsisLeft = true;
                                    vm._ellipsisRight = true;

                                    if ( i > vm.currentPages - currentPageShowMiddleNumber && i < vm.currentPages + currentPageShowMiddleNumber){
                                        vm._pageArrayMiddle.push({value:i});
                                    }
                                }

                                if ( vm.currentPages >= vm.totalPages - paginationMiddleShowNumber && i >= vm.totalPages - paginationMiddleShowNumber - 1) {
                                    vm._ellipsisLeft = true;
                                    vm._pageArrayMiddle.push({value:i});
                                }
                            }
                        }
                    }
                }
            }


        });





        $.ajax({
            url    : "/api/financial/order/details",
            method : "POST",
            data   : {},
            success:function(data){

                vm.value = Math.ceil(data.count / data.pagesize);
                vm.totalPages = Math.ceil(data.count / data.pagesize);
            }
        })

    })

</script>
<p>给用户用的API有</p>
<ul>
    <li>value:用于提交表单</li>
    <li>name:用于提交表单</li>
    <li>onChange:当value改变时触发,如果它返回false则不会自动关闭菜单</li>
    <li>items:列表中的内容</li>
</ul>
</body>
</html>